{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0","program":"C:\\Users\\milla\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","bytemuck","--edition=2018","C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=2803b6abfe093633","-C","extra-filename=-2803b6abfe093633","--out-dir","c:\\Users\\milla\\Desktop\\coding\\TicTacToe\\tictactoe\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\milla\\Desktop\\coding\\TicTacToe\\tictactoe\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\milla\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\milla\\Desktop\\coding\\TicTacToe\\tictactoe\\target\\rls\\debug\\deps\\libbytemuck-2803b6abfe093633.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[1107151222671401054,0]},"crate_root":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src","external_crates":[{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[5226548339696486402,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15782588708828798436,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11258588358156983047,0]}}],"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":0,"byte_end":11004,"line_start":1,"line_end":385,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2137,"byte_end":2141,"line_start":56,"line_end":56,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2846,"byte_end":2847,"line_start":84,"line_end":84,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2884,"byte_end":2901,"line_start":87,"line_end":87,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2951,"byte_end":2952,"line_start":92,"line_end":92,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3006,"byte_end":3007,"line_start":94,"line_end":94,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ZeroableInOption","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3032,"byte_end":3033,"line_start":97,"line_end":97,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3077,"byte_end":3078,"line_start":99,"line_end":99,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3115,"byte_end":3116,"line_start":102,"line_end":102,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3155,"byte_end":3156,"line_start":105,"line_end":105,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3193,"byte_end":3194,"line_start":108,"line_end":108,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3235,"byte_end":3236,"line_start":111,"line_end":111,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":0,"byte_end":11004,"line_start":1,"line_end":385,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":163},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":404},{"krate":0,"index":808},{"krate":0,"index":817},{"krate":0,"index":819},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":107,"byte_end":181,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":182,"byte_end":185,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":186,"byte_end":199,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":200,"byte_end":203,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":204,"byte_end":277,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":278,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":293,"byte_end":296,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":297,"byte_end":320,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":321,"byte_end":349,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":350,"byte_end":382,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":383,"byte_end":415,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":416,"byte_end":456,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":457,"byte_end":460,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":461,"byte_end":536,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":537,"byte_end":616,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":617,"byte_end":697,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":698,"byte_end":777,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":778,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":801,"byte_end":828,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":829,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":833,"byte_end":904,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":905,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":946,"byte_end":949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":950,"byte_end":1025,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1026,"byte_end":1103,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1104,"byte_end":1181,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1182,"byte_end":1227,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1228,"byte_end":1231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1232,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1248,"byte_end":1251,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1252,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1333,"byte_end":1412,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1413,"byte_end":1492,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1493,"byte_end":1563,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":14006,"byte_end":14019,"line_start":48,"line_end":48,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11420,"byte_end":11499,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11500,"byte_end":11503,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11504,"byte_end":11561,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that the type can allow uninit (or padding) bytes.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11562,"byte_end":11623,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11624,"byte_end":11703,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as `union`s. Notably, you can only cast","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11704,"byte_end":11814,"line_start":8,"line_end":8,"column_start":1,"column_end":111}},{"value":"/ *immutable* references and *owned* values into [`AnyBitPattern`] types, not","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11815,"byte_end":11894,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ *mutable* references.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11895,"byte_end":11920,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11921,"byte_end":11924,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":11925,"byte_end":12004,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12005,"byte_end":12081,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12082,"byte_end":12085,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T: AnyBitPattern`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12086,"byte_end":12172,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/ is also [`Zeroable`], but any `T: Zeroable` is not necessarily [`AnyBitPattern  ]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12173,"byte_end":12258,"line_start":16,"line_end":16,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12259,"byte_end":12262,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12263,"byte_end":12275,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12276,"byte_end":12279,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12280,"byte_end":12373,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12374,"byte_end":12449,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ trait for you for both structs and enums. This is the recommended method for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12450,"byte_end":12530,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually. If you","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12531,"byte_end":12608,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ implement it manually, you *must* carefully follow the below safety rules.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12609,"byte_end":12687,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12688,"byte_end":12691,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12692,"byte_end":12772,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12773,"byte_end":12853,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12854,"byte_end":12898,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ ","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12899,"byte_end":12903,"line_start":29,"line_end":29,"column_start":1,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12904,"byte_end":12916,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12917,"byte_end":12920,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain uninit bytes.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":12921,"byte_end":13012,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"/ Still, this is a quite strong guarantee about a type, so *be careful* when","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13013,"byte_end":13091,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ implementing it manually.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13092,"byte_end":13121,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13122,"byte_end":13125,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13126,"byte_end":13166,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13167,"byte_end":13214,"line_start":37,"line_end":37,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13215,"byte_end":13286,"line_start":38,"line_end":38,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13287,"byte_end":13349,"line_start":39,"line_end":39,"column_start":1,"column_end":63}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`, atomics, and any","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13350,"byte_end":13447,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/   other forms of interior mutability.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13448,"byte_end":13489,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and *only* reads. RustBelt's","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13490,"byte_end":13589,"line_start":42,"line_end":42,"column_start":1,"column_end":100}},{"value":"/   separation logic is based on the notion that a type is allowed to define a sharing predicate,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13590,"byte_end":13689,"line_start":43,"line_end":43,"column_start":1,"column_end":100}},{"value":"/   its own invariant that must hold for shared references, and this predicate is the reasoning","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13690,"byte_end":13787,"line_start":44,"line_end":44,"column_start":1,"column_end":98}},{"value":"/   that allow it to deal with atomic and cells etc. We require the sharing predicate to be","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13788,"byte_end":13881,"line_start":45,"line_end":45,"column_start":1,"column_end":94}},{"value":"/   trivial and permit only read-only access.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13882,"byte_end":13929,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":13930,"byte_end":13988,"line_start":47,"line_end":47,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":459},{"krate":0,"index":465},{"krate":0,"index":467},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14153,"byte_end":14220,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14221,"byte_end":14266,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18965,"byte_end":18982,"line_start":121,"line_end":121,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be used\n in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by performing\n a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be used","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14347,"byte_end":14430,"line_start":6,"line_end":6,"column_start":1,"column_end":84}},{"value":"/ in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by performing","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14431,"byte_end":14516,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14517,"byte_end":14586,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and structs containing them.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14587,"byte_end":14686,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14687,"byte_end":14690,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14691,"byte_end":14769,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14770,"byte_end":14846,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement [`AnyBitPattern`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14847,"byte_end":14933,"line_start":13,"line_end":13,"column_start":1,"column_end":87}},{"value":"/ Then, we implement a function that checks wheter a certain instance","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":14934,"byte_end":15005,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ of the `Bits` is also a valid bit pattern of `Self`. If this check passes, then we","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15006,"byte_end":15092,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/ can allow casting from the `Bits` to `Self` (and therefore, any type which","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15093,"byte_end":15171,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ is able to be cast to `Bits` is also able to be cast to `Self`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15172,"byte_end":15240,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15241,"byte_end":15244,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T: AnyBitPattern` is also","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15245,"byte_end":15348,"line_start":19,"line_end":19,"column_start":1,"column_end":104}},{"value":"/ [`CheckedBitPattern`]. This means you can also use any [`AnyBitPattern`] type in the checked versions","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15349,"byte_end":15454,"line_start":20,"line_end":20,"column_start":1,"column_end":106}},{"value":"/ of casting functions in this module. If it's possible, prefer implementing [`AnyBitPattern`] for your","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15455,"byte_end":15560,"line_start":21,"line_end":21,"column_start":1,"column_end":106}},{"value":"/ type directly instead of [`CheckedBitPattern`] as it gives greater flexibility.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15561,"byte_end":15644,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15645,"byte_end":15648,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15649,"byte_end":15661,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15662,"byte_end":15665,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15666,"byte_end":15763,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15764,"byte_end":15839,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ trait for you for both enums and structs. This is the recommended method for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15840,"byte_end":15920,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15921,"byte_end":15991,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15992,"byte_end":15995,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":15996,"byte_end":16009,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16010,"byte_end":16013,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16014,"byte_end":16082,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16083,"byte_end":16086,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16087,"byte_end":16098,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16099,"byte_end":16147,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16148,"byte_end":16151,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16152,"byte_end":16168,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16169,"byte_end":16195,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16196,"byte_end":16213,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16214,"byte_end":16235,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16236,"byte_end":16257,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16258,"byte_end":16279,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16280,"byte_end":16285,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16286,"byte_end":16289,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16290,"byte_end":16336,"line_start":46,"line_end":46,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16337,"byte_end":16361,"line_start":47,"line_end":47,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16362,"byte_end":16365,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16366,"byte_end":16419,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16420,"byte_end":16445,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16446,"byte_end":16480,"line_start":51,"line_end":51,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16481,"byte_end":16508,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16509,"byte_end":16522,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16523,"byte_end":16532,"line_start":54,"line_end":54,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16533,"byte_end":16538,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/ ","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16539,"byte_end":16543,"line_start":56,"line_end":56,"column_start":1,"column_end":5}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16544,"byte_end":16632,"line_start":57,"line_end":57,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16633,"byte_end":16716,"line_start":58,"line_end":58,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16717,"byte_end":16805,"line_start":59,"line_end":59,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16806,"byte_end":16844,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16845,"byte_end":16852,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16853,"byte_end":16856,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16857,"byte_end":16916,"line_start":63,"line_end":63,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16917,"byte_end":16920,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16921,"byte_end":16932,"line_start":65,"line_end":65,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16933,"byte_end":16983,"line_start":66,"line_end":66,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":16984,"byte_end":17002,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17003,"byte_end":17053,"line_start":68,"line_end":68,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17054,"byte_end":17073,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17074,"byte_end":17097,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17098,"byte_end":17121,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17122,"byte_end":17145,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17146,"byte_end":17153,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17154,"byte_end":17194,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17195,"byte_end":17243,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17244,"byte_end":17270,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17271,"byte_end":17326,"line_start":77,"line_end":77,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17327,"byte_end":17354,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17355,"byte_end":17391,"line_start":79,"line_end":79,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17392,"byte_end":17421,"line_start":80,"line_end":80,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17422,"byte_end":17437,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17438,"byte_end":17449,"line_start":82,"line_end":82,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17450,"byte_end":17457,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17458,"byte_end":17501,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17502,"byte_end":17528,"line_start":85,"line_end":85,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17529,"byte_end":17532,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17533,"byte_end":17565,"line_start":87,"line_end":87,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17566,"byte_end":17624,"line_start":88,"line_end":88,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17625,"byte_end":17671,"line_start":89,"line_end":89,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17672,"byte_end":17675,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17676,"byte_end":17713,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17714,"byte_end":17748,"line_start":92,"line_end":92,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17749,"byte_end":17807,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17808,"byte_end":17837,"line_start":94,"line_end":94,"column_start":1,"column_end":30}},{"value":"/ ","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17838,"byte_end":17842,"line_start":95,"line_end":95,"column_start":1,"column_end":5}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17843,"byte_end":17927,"line_start":96,"line_end":96,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17928,"byte_end":17970,"line_start":97,"line_end":97,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17971,"byte_end":17997,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":17998,"byte_end":18003,"line_start":99,"line_end":99,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18004,"byte_end":18072,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18073,"byte_end":18126,"line_start":101,"line_end":101,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18127,"byte_end":18165,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18166,"byte_end":18171,"line_start":103,"line_end":103,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18172,"byte_end":18201,"line_start":104,"line_end":104,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18202,"byte_end":18209,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18210,"byte_end":18213,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18214,"byte_end":18226,"line_start":107,"line_end":107,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18227,"byte_end":18230,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18231,"byte_end":18306,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18307,"byte_end":18391,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18392,"byte_end":18471,"line_start":111,"line_end":111,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If you","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18472,"byte_end":18554,"line_start":112,"line_end":112,"column_start":1,"column_end":83}},{"value":"/   still think you know better, be careful and have fun. And don't mess it up","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18555,"byte_end":18635,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   (I mean it).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18636,"byte_end":18654,"line_start":114,"line_end":114,"column_start":1,"column_end":19}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18655,"byte_end":18736,"line_start":115,"line_end":115,"column_start":1,"column_end":82}},{"value":"/   `bits` must also be valid for an instance of `Self`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18737,"byte_end":18795,"line_start":116,"line_end":116,"column_start":1,"column_end":59}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18796,"byte_end":18849,"line_start":117,"line_end":117,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18850,"byte_end":18853,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18854,"byte_end":18923,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18924,"byte_end":18947,"line_start":120,"line_end":120,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":19239,"byte_end":19243,"line_start":126,"line_end":126,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18993,"byte_end":19066,"line_start":122,"line_end":122,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":19069,"byte_end":19153,"line_start":123,"line_end":123,"column_start":3,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":19156,"byte_end":19159,"line_start":124,"line_end":124,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":19162,"byte_end":19231,"line_start":125,"line_end":125,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":19359,"byte_end":19379,"line_start":129,"line_end":129,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"pub fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits` as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits` as `&Self`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":19263,"byte_end":19353,"line_start":128,"line_end":128,"column_start":3,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20162,"byte_end":20174,"line_start":166,"line_end":166,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast\n","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20111,"byte_end":20159,"line_start":165,"line_end":165,"column_start":3,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20449,"byte_end":20466,"line_start":171,"line_end":171,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the original\n data contains an invalid bit pattern. If so, the cast will fail and\n this error will be returned. Will never happen on casts between\n [`Pod`] types.\n","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the original","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20199,"byte_end":20281,"line_start":167,"line_end":167,"column_start":3,"column_end":85}},{"value":"/ data contains an invalid bit pattern. If so, the cast will fail and","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20284,"byte_end":20355,"line_start":168,"line_end":168,"column_start":3,"column_end":74}},{"value":"/ this error will be returned. Will never happen on casts between","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20358,"byte_end":20425,"line_start":169,"line_end":169,"column_start":3,"column_end":70}},{"value":"/ [`Pod`] types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20428,"byte_end":20446,"line_start":170,"line_end":170,"column_start":3,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20090,"byte_end":20106,"line_start":164,"line_end":164,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"pub enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":463}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data forms.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":19942,"byte_end":20029,"line_start":162,"line_end":162,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21153,"byte_end":21167,"line_start":197,"line_end":197,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"pub fn try_from_bytes<T: CheckedBitPattern>(&[u8])\n-> Result<&T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20900,"byte_end":20934,"line_start":189,"line_end":189,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20935,"byte_end":20938,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20939,"byte_end":20953,"line_start":191,"line_end":191,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20954,"byte_end":20957,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20958,"byte_end":21007,"line_start":193,"line_end":193,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21008,"byte_end":21076,"line_start":194,"line_end":194,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21077,"byte_end":21135,"line_start":195,"line_end":195,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21136,"byte_end":21145,"line_start":196,"line_end":196,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21756,"byte_end":21774,"line_start":217,"line_end":217,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: CheckedBitPattern + NoUninit>(&mut [u8])\n-> Result<&mut T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21495,"byte_end":21537,"line_start":209,"line_end":209,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21538,"byte_end":21541,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21542,"byte_end":21556,"line_start":211,"line_end":211,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21557,"byte_end":21560,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21561,"byte_end":21610,"line_start":213,"line_end":213,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21611,"byte_end":21679,"line_start":214,"line_end":214,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21680,"byte_end":21738,"line_start":215,"line_end":215,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":21739,"byte_end":21748,"line_start":216,"line_end":216,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22330,"byte_end":22352,"line_start":235,"line_end":235,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: CheckedBitPattern>(&[u8])\n-> Result<T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22125,"byte_end":22172,"line_start":229,"line_end":229,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22173,"byte_end":22176,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22177,"byte_end":22191,"line_start":231,"line_end":231,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22192,"byte_end":22253,"line_start":232,"line_end":232,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22254,"byte_end":22312,"line_start":233,"line_end":233,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22313,"byte_end":22322,"line_start":234,"line_end":234,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23097,"byte_end":23105,"line_start":257,"line_end":257,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"pub fn try_cast<A: NoUninit, B: CheckedBitPattern>(A)\n-> Result<B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22645,"byte_end":22674,"line_start":245,"line_end":245,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22675,"byte_end":22678,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22679,"byte_end":22756,"line_start":247,"line_end":247,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22757,"byte_end":22836,"line_start":248,"line_end":248,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22837,"byte_end":22915,"line_start":249,"line_end":249,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22916,"byte_end":22935,"line_start":250,"line_end":250,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22936,"byte_end":22939,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22940,"byte_end":22954,"line_start":252,"line_end":252,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22955,"byte_end":22958,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":22959,"byte_end":23014,"line_start":254,"line_end":254,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23015,"byte_end":23079,"line_start":255,"line_end":255,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23080,"byte_end":23089,"line_start":256,"line_end":256,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23649,"byte_end":23661,"line_start":277,"line_end":277,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"pub fn try_cast_ref<A: NoUninit, B: CheckedBitPattern>(&A)\n-> Result<&B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23391,"byte_end":23427,"line_start":269,"line_end":269,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23428,"byte_end":23431,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23432,"byte_end":23446,"line_start":271,"line_end":271,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23447,"byte_end":23450,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23451,"byte_end":23503,"line_start":273,"line_end":273,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23504,"byte_end":23566,"line_start":274,"line_end":274,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23567,"byte_end":23631,"line_start":275,"line_end":275,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23632,"byte_end":23641,"line_start":276,"line_end":276,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24103,"byte_end":24115,"line_start":293,"line_end":293,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"pub fn try_cast_mut<A: NoUninit + AnyBitPattern, B: CheckedBitPattern +\nNoUninit>(&mut A) -> Result<&mut B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":23997,"byte_end":24041,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24042,"byte_end":24045,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_ref`], but `mut`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24046,"byte_end":24085,"line_start":291,"line_end":291,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24086,"byte_end":24095,"line_start":292,"line_end":292,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25345,"byte_end":25359,"line_start":322,"line_end":322,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"pub fn try_cast_slice<A: NoUninit, B: CheckedBitPattern>(&[A])\n-> Result<&[B], CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24486,"byte_end":24559,"line_start":305,"line_end":305,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24560,"byte_end":24563,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24564,"byte_end":24623,"line_start":307,"line_end":307,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24624,"byte_end":24693,"line_start":308,"line_end":308,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24694,"byte_end":24697,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24698,"byte_end":24712,"line_start":310,"line_end":310,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24713,"byte_end":24716,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24717,"byte_end":24797,"line_start":312,"line_end":312,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24798,"byte_end":24818,"line_start":313,"line_end":313,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24819,"byte_end":24896,"line_start":314,"line_end":314,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24897,"byte_end":24973,"line_start":315,"line_end":315,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":24974,"byte_end":25054,"line_start":316,"line_end":316,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25055,"byte_end":25079,"line_start":317,"line_end":317,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25080,"byte_end":25205,"line_start":318,"line_end":318,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25206,"byte_end":25226,"line_start":319,"line_end":319,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25227,"byte_end":25327,"line_start":320,"line_end":320,"column_start":1,"column_end":101}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25328,"byte_end":25337,"line_start":321,"line_end":321,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25887,"byte_end":25905,"line_start":341,"line_end":341,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: NoUninit + AnyBitPattern, B: CheckedBitPattern +\nNoUninit>(&mut [A]) -> Result<&mut [B], CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25737,"byte_end":25809,"line_start":336,"line_end":336,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25810,"byte_end":25822,"line_start":337,"line_end":337,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25823,"byte_end":25826,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_slice`], but `&mut`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25827,"byte_end":25869,"line_start":339,"line_end":339,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":25870,"byte_end":25879,"line_start":340,"line_end":340,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26454,"byte_end":26464,"line_start":361,"line_end":361,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"pub fn from_bytes<T: CheckedBitPattern>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26324,"byte_end":26358,"line_start":355,"line_end":355,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26359,"byte_end":26362,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26363,"byte_end":26376,"line_start":357,"line_end":357,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26377,"byte_end":26380,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26381,"byte_end":26436,"line_start":359,"line_end":359,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26437,"byte_end":26446,"line_start":360,"line_end":360,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26751,"byte_end":26765,"line_start":374,"line_end":374,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"pub fn from_bytes_mut<T: NoUninit + CheckedBitPattern>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26609,"byte_end":26651,"line_start":368,"line_end":368,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26652,"byte_end":26655,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26656,"byte_end":26669,"line_start":370,"line_end":370,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26670,"byte_end":26673,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26674,"byte_end":26733,"line_start":372,"line_end":372,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26734,"byte_end":26743,"line_start":373,"line_end":373,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27081,"byte_end":27099,"line_start":386,"line_end":386,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: AnyBitPattern>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26937,"byte_end":26974,"line_start":381,"line_end":381,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26975,"byte_end":26978,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26979,"byte_end":26992,"line_start":383,"line_end":383,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":26993,"byte_end":27063,"line_start":384,"line_end":384,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27064,"byte_end":27073,"line_start":385,"line_end":385,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27402,"byte_end":27406,"line_start":399,"line_end":399,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"pub fn cast<A: NoUninit, B: CheckedBitPattern>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27263,"byte_end":27284,"line_start":393,"line_end":393,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27285,"byte_end":27288,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27289,"byte_end":27302,"line_start":395,"line_end":395,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27303,"byte_end":27306,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27307,"byte_end":27384,"line_start":397,"line_end":397,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27385,"byte_end":27394,"line_start":398,"line_end":398,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27673,"byte_end":27681,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"pub fn cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nCheckedBitPattern>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27547,"byte_end":27579,"line_start":406,"line_end":406,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27580,"byte_end":27583,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27584,"byte_end":27597,"line_start":408,"line_end":408,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27598,"byte_end":27601,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27602,"byte_end":27655,"line_start":410,"line_end":410,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27656,"byte_end":27665,"line_start":411,"line_end":411,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27985,"byte_end":27993,"line_start":425,"line_end":425,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"pub fn cast_ref<A: NoUninit, B: CheckedBitPattern>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27867,"byte_end":27891,"line_start":419,"line_end":419,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27892,"byte_end":27895,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27896,"byte_end":27909,"line_start":421,"line_end":421,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27910,"byte_end":27913,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27914,"byte_end":27967,"line_start":423,"line_end":423,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":27968,"byte_end":27977,"line_start":424,"line_end":424,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28268,"byte_end":28278,"line_start":438,"line_end":438,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"pub fn cast_slice<A: NoUninit, B: CheckedBitPattern>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28144,"byte_end":28172,"line_start":432,"line_end":432,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28173,"byte_end":28176,"line_start":433,"line_end":433,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28177,"byte_end":28190,"line_start":434,"line_end":434,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28191,"byte_end":28194,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28195,"byte_end":28250,"line_start":436,"line_end":436,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28251,"byte_end":28260,"line_start":437,"line_end":437,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28573,"byte_end":28587,"line_start":451,"line_end":451,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"pub fn cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nCheckedBitPattern>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28437,"byte_end":28473,"line_start":445,"line_end":445,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28474,"byte_end":28477,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28478,"byte_end":28491,"line_start":447,"line_end":447,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28492,"byte_end":28495,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28496,"byte_end":28555,"line_start":449,"line_end":449,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":28556,"byte_end":28565,"line_start":450,"line_end":450,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41764,"byte_end":41772,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":166}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41306,"byte_end":41357,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41358,"byte_end":41392,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41393,"byte_end":41396,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41397,"byte_end":41460,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41461,"byte_end":41517,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41518,"byte_end":41521,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41522,"byte_end":41535,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41536,"byte_end":41539,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41540,"byte_end":41581,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41582,"byte_end":41629,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41630,"byte_end":41703,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41704,"byte_end":41746,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42052,"byte_end":42058,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":165},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41784,"byte_end":41824,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41827,"byte_end":41830,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41833,"byte_end":41908,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41911,"byte_end":41989,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41992,"byte_end":42034,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42037,"byte_end":42046,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57898,"byte_end":57914,"line_start":13,"line_end":13,"column_start":18,"column_end":34},"name":"ZeroableInOption","qualname":"::zeroable_in_option::ZeroableInOption","value":"ZeroableInOption: Sized","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Zeroable](Zeroable) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Zeroable](Zeroable) when wrapped in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57668,"byte_end":57734,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57735,"byte_end":57770,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57771,"byte_end":57774,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57775,"byte_end":57788,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57789,"byte_end":57792,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<YourType>` must uphold the same invariants as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57793,"byte_end":57852,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/   [Zeroable](Zeroable).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57853,"byte_end":57880,"line_start":12,"line_end":12,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60483,"byte_end":60486,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":58589,"byte_end":58627,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":58628,"byte_end":58631,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":58632,"byte_end":58709,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":58710,"byte_end":58789,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":58790,"byte_end":58870,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":58871,"byte_end":58889,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":58890,"byte_end":58893,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":58894,"byte_end":58970,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":58971,"byte_end":59042,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59043,"byte_end":59117,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59118,"byte_end":59136,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59137,"byte_end":59140,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59141,"byte_end":59154,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59155,"byte_end":59158,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59159,"byte_end":59199,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59200,"byte_end":59247,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59248,"byte_end":59326,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59327,"byte_end":59355,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59356,"byte_end":59432,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59433,"byte_end":59511,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59512,"byte_end":59592,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59593,"byte_end":59623,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59624,"byte_end":59678,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59679,"byte_end":59754,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59755,"byte_end":59834,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59835,"byte_end":59879,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59880,"byte_end":59960,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":59961,"byte_end":60019,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60020,"byte_end":60094,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60095,"byte_end":60172,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60173,"byte_end":60253,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60254,"byte_end":60334,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60335,"byte_end":60414,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60415,"byte_end":60465,"line_start":36,"line_end":36,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74792,"byte_end":74803,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"name":"PodInOption","qualname":"::pod_in_option::PodInOption","value":"PodInOption: ZeroableInOption + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Pod](Pod) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Pod](Pod) when wrapped in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74466,"byte_end":74522,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74523,"byte_end":74558,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74559,"byte_end":74562,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74563,"byte_end":74576,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74577,"byte_end":74580,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<T>` must uphold the same invariants as [Pod](Pod).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74581,"byte_end":74645,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ * **Reminder:** pointers are **not** pod! **Do not** mix this trait with a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74646,"byte_end":74724,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   newtype over [NonNull](core::ptr::NonNull).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74725,"byte_end":74774,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78678,"byte_end":78686,"line_start":67,"line_end":67,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":75612,"byte_end":75690,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":75691,"byte_end":75694,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":75695,"byte_end":75752,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid, i.e.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":75753,"byte_end":75837,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/ it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":75838,"byte_end":75907,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":75908,"byte_end":75987,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":75988,"byte_end":76068,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of any other","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76069,"byte_end":76159,"line_start":24,"line_end":24,"column_start":1,"column_end":91}},{"value":"/ type, no casting of mutable references or mutable references to slices etc.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76160,"byte_end":76239,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76240,"byte_end":76243,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76244,"byte_end":76318,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76319,"byte_end":76398,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76399,"byte_end":76483,"line_start":29,"line_end":29,"column_start":1,"column_end":85}},{"value":"/ a type that is only [`NoUninit`], consider also implementing [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76484,"byte_end":76597,"line_start":30,"line_end":30,"column_start":1,"column_end":114}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76598,"byte_end":76601,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76602,"byte_end":76614,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76615,"byte_end":76618,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76619,"byte_end":76707,"line_start":34,"line_end":34,"column_start":1,"column_end":89}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76708,"byte_end":76783,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ trait for you for both enums and structs. This is the recommended method for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76784,"byte_end":76864,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually. If you","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76865,"byte_end":76942,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ implement it manually, you *must* carefully follow the below safety rules.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":76943,"byte_end":77021,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77022,"byte_end":77025,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77026,"byte_end":77038,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77039,"byte_end":77042,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77043,"byte_end":77109,"line_start":42,"line_end":42,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be [`Zeroable`][crate::Zeroable]).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77110,"byte_end":77196,"line_start":43,"line_end":43,"column_start":1,"column_end":87}},{"value":"/ Still, this is a quite strong guarantee about a type, so *be careful* whem","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77197,"byte_end":77275,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ implementing it manually.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77276,"byte_end":77305,"line_start":45,"line_end":45,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77306,"byte_end":77309,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77310,"byte_end":77350,"line_start":47,"line_end":47,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77351,"byte_end":77398,"line_start":48,"line_end":48,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the middle or on","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77399,"byte_end":77488,"line_start":49,"line_end":49,"column_start":1,"column_end":90}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77489,"byte_end":77569,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77570,"byte_end":77650,"line_start":51,"line_end":51,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77651,"byte_end":77666,"line_start":52,"line_end":52,"column_start":1,"column_end":16}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77667,"byte_end":77724,"line_start":53,"line_end":53,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77725,"byte_end":77798,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77799,"byte_end":77878,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77879,"byte_end":77923,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77924,"byte_end":77975,"line_start":57,"line_end":57,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":77976,"byte_end":78021,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`, atomics, and any","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78022,"byte_end":78119,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/   other forms of interior mutability.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78120,"byte_end":78161,"line_start":60,"line_end":60,"column_start":1,"column_end":42}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and *only* reads. RustBelt's","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78162,"byte_end":78261,"line_start":61,"line_end":61,"column_start":1,"column_end":100}},{"value":"/   separation logic is based on the notion that a type is allowed to define a sharing predicate,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78262,"byte_end":78361,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/   its own invariant that must hold for shared references, and this predicate is the reasoning","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78362,"byte_end":78459,"line_start":63,"line_end":63,"column_start":1,"column_end":98}},{"value":"/   that allow it to deal with atomic and cells etc. We require the sharing predicate to be","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78460,"byte_end":78553,"line_start":64,"line_end":64,"column_start":1,"column_end":94}},{"value":"/   trivial and permit only read-only access.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78554,"byte_end":78601,"line_start":65,"line_end":65,"column_start":1,"column_end":48}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78602,"byte_end":78660,"line_start":66,"line_end":66,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82362,"byte_end":82372,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79394,"byte_end":79422,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79423,"byte_end":79426,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79427,"byte_end":79502,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79503,"byte_end":79569,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79570,"byte_end":79614,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79615,"byte_end":79618,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79619,"byte_end":79698,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79699,"byte_end":79779,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79780,"byte_end":79842,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79843,"byte_end":79846,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79847,"byte_end":79925,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":79926,"byte_end":80001,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80002,"byte_end":80030,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80031,"byte_end":80034,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80035,"byte_end":80048,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80049,"byte_end":80052,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80053,"byte_end":80060,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80061,"byte_end":80092,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80093,"byte_end":80108,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80109,"byte_end":80153,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80154,"byte_end":80168,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80169,"byte_end":80181,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80182,"byte_end":80194,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80195,"byte_end":80207,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80208,"byte_end":80220,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80221,"byte_end":80233,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80234,"byte_end":80239,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80240,"byte_end":80276,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80277,"byte_end":80297,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80298,"byte_end":80339,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80340,"byte_end":80381,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80382,"byte_end":80387,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80388,"byte_end":80442,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80443,"byte_end":80486,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80487,"byte_end":80528,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80529,"byte_end":80536,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80537,"byte_end":80549,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80550,"byte_end":80553,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80554,"byte_end":80627,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80628,"byte_end":80641,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80642,"byte_end":80645,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80646,"byte_end":80723,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80724,"byte_end":80803,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80804,"byte_end":80858,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80859,"byte_end":80862,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80863,"byte_end":80943,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80944,"byte_end":80966,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80967,"byte_end":80970,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":80971,"byte_end":81051,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81052,"byte_end":81108,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81109,"byte_end":81112,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81113,"byte_end":81188,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81189,"byte_end":81261,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81262,"byte_end":81331,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81332,"byte_end":81335,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81336,"byte_end":81414,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81415,"byte_end":81491,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81492,"byte_end":81503,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81504,"byte_end":81507,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81508,"byte_end":81580,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81581,"byte_end":81659,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81660,"byte_end":81736,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81737,"byte_end":81816,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81817,"byte_end":81820,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81821,"byte_end":81893,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81894,"byte_end":81959,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81960,"byte_end":81963,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":81964,"byte_end":82041,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82042,"byte_end":82064,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82065,"byte_end":82068,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82069,"byte_end":82148,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82149,"byte_end":82182,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82183,"byte_end":82186,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82187,"byte_end":82264,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82265,"byte_end":82344,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83197,"byte_end":83200,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82393,"byte_end":82464,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82467,"byte_end":82476,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82479,"byte_end":82482,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82485,"byte_end":82557,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82560,"byte_end":82626,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82629,"byte_end":82697,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82700,"byte_end":82742,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82745,"byte_end":82748,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82751,"byte_end":82828,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82831,"byte_end":82853,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82856,"byte_end":82859,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82862,"byte_end":82931,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82934,"byte_end":83010,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83013,"byte_end":83082,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83085,"byte_end":83123,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83126,"byte_end":83129,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83132,"byte_end":83189,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83291,"byte_end":83300,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83217,"byte_end":83282,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83390,"byte_end":83399,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83316,"byte_end":83381,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":84064,"byte_end":84076,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83415,"byte_end":83483,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83486,"byte_end":83549,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83552,"byte_end":83555,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83558,"byte_end":83632,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83635,"byte_end":83702,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83705,"byte_end":83773,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83776,"byte_end":83779,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83782,"byte_end":83794,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83797,"byte_end":83800,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83803,"byte_end":83876,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83879,"byte_end":83925,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83928,"byte_end":83931,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":83934,"byte_end":84008,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":84011,"byte_end":84046,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":84049,"byte_end":84058,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85599,"byte_end":85611,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":84915,"byte_end":84990,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":84993,"byte_end":85069,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85072,"byte_end":85084,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85087,"byte_end":85090,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85093,"byte_end":85167,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85170,"byte_end":85237,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85240,"byte_end":85308,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85311,"byte_end":85314,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85317,"byte_end":85329,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85332,"byte_end":85335,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85338,"byte_end":85411,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85414,"byte_end":85460,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85463,"byte_end":85466,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85469,"byte_end":85543,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85546,"byte_end":85581,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":85584,"byte_end":85593,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95745,"byte_end":95763,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner: ?Sized>","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":92656,"byte_end":92731,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":92732,"byte_end":92761,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":92762,"byte_end":92765,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":92766,"byte_end":92838,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":92839,"byte_end":92917,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":92918,"byte_end":92996,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":92997,"byte_end":93073,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93074,"byte_end":93150,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93151,"byte_end":93199,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93200,"byte_end":93203,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93204,"byte_end":93216,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93217,"byte_end":93220,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93221,"byte_end":93290,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93291,"byte_end":93294,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93295,"byte_end":93366,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93367,"byte_end":93370,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93371,"byte_end":93443,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93444,"byte_end":93506,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93507,"byte_end":93586,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93587,"byte_end":93666,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93667,"byte_end":93697,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93698,"byte_end":93701,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93702,"byte_end":93782,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93783,"byte_end":93844,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93845,"byte_end":93848,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93849,"byte_end":93923,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93924,"byte_end":93939,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":93940,"byte_end":94018,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94019,"byte_end":94097,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94098,"byte_end":94101,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94102,"byte_end":94173,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94174,"byte_end":94177,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94178,"byte_end":94192,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94193,"byte_end":94196,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94197,"byte_end":94276,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94277,"byte_end":94356,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94357,"byte_end":94432,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94433,"byte_end":94502,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94503,"byte_end":94540,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94541,"byte_end":94544,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94545,"byte_end":94623,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94624,"byte_end":94692,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94693,"byte_end":94696,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94697,"byte_end":94711,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94712,"byte_end":94715,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94716,"byte_end":94728,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94729,"byte_end":94732,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94733,"byte_end":94740,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94741,"byte_end":94778,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94779,"byte_end":94803,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94804,"byte_end":94833,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94834,"byte_end":94837,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94838,"byte_end":94862,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94863,"byte_end":94896,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94897,"byte_end":94900,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94901,"byte_end":94964,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94965,"byte_end":94968,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":94969,"byte_end":95028,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95029,"byte_end":95067,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95068,"byte_end":95128,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95129,"byte_end":95132,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95133,"byte_end":95160,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95161,"byte_end":95207,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95208,"byte_end":95280,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95281,"byte_end":95284,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95285,"byte_end":95342,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95343,"byte_end":95350,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95351,"byte_end":95354,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95355,"byte_end":95394,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95395,"byte_end":95398,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95399,"byte_end":95406,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95407,"byte_end":95444,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95445,"byte_end":95448,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95449,"byte_end":95473,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95474,"byte_end":95499,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95500,"byte_end":95503,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95504,"byte_end":95562,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95563,"byte_end":95566,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95567,"byte_end":95610,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95611,"byte_end":95644,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95645,"byte_end":95648,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95649,"byte_end":95679,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95680,"byte_end":95719,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95720,"byte_end":95727,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95850,"byte_end":95854,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"pub fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95783,"byte_end":95832,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":95835,"byte_end":95844,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":96166,"byte_end":96174,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":96063,"byte_end":96136,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":96139,"byte_end":96148,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":96151,"byte_end":96160,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":96864,"byte_end":96872,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":96745,"byte_end":96822,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":96825,"byte_end":96846,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":96849,"byte_end":96858,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":97536,"byte_end":97546,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"pub fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":97447,"byte_end":97518,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":97521,"byte_end":97530,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98090,"byte_end":98104,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"pub fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":97979,"byte_end":98052,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98055,"byte_end":98072,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98075,"byte_end":98084,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98610,"byte_end":98614,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"pub fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98543,"byte_end":98592,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98595,"byte_end":98604,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98819,"byte_end":98827,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"pub fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98716,"byte_end":98789,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98792,"byte_end":98801,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":98804,"byte_end":98813,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":99517,"byte_end":99525,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"pub fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":99398,"byte_end":99474,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":99477,"byte_end":99499,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":99502,"byte_end":99511,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":100189,"byte_end":100199,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"pub fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":100100,"byte_end":100171,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":100174,"byte_end":100183,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":100744,"byte_end":100758,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"pub fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":100633,"byte_end":100708,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":100711,"byte_end":100726,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":100729,"byte_end":100738,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3666,"byte_end":3706,"line_start":124,"line_end":124,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":808},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3543,"byte_end":3615,"line_start":122,"line_end":122,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3618,"byte_end":3663,"line_start":123,"line_end":123,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3892,"byte_end":3916,"line_start":128,"line_end":128,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":808},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3710,"byte_end":3778,"line_start":125,"line_end":125,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3781,"byte_end":3856,"line_start":126,"line_end":126,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3859,"byte_end":3889,"line_start":127,"line_end":127,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4137,"byte_end":4149,"line_start":132,"line_end":132,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":808},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3920,"byte_end":3995,"line_start":129,"line_end":129,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3998,"byte_end":4071,"line_start":130,"line_end":130,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4074,"byte_end":4134,"line_start":131,"line_end":131,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4440,"byte_end":4457,"line_start":139,"line_end":139,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":808},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4153,"byte_end":4227,"line_start":133,"line_end":133,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4230,"byte_end":4261,"line_start":134,"line_end":134,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4264,"byte_end":4267,"line_start":135,"line_end":135,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4270,"byte_end":4346,"line_start":136,"line_end":136,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4349,"byte_end":4424,"line_start":137,"line_end":137,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4427,"byte_end":4437,"line_start":138,"line_end":138,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3526,"byte_end":3538,"line_start":121,"line_end":121,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":809},{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":815}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3392,"byte_end":3465,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4932,"byte_end":4940,"line_start":155,"line_end":155,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: NoUninit>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4723,"byte_end":4757,"line_start":150,"line_end":150,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4758,"byte_end":4761,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4762,"byte_end":4840,"line_start":152,"line_end":152,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4841,"byte_end":4914,"line_start":153,"line_end":153,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4915,"byte_end":4924,"line_start":154,"line_end":154,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5227,"byte_end":5239,"line_start":164,"line_end":164,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: NoUninit + AnyBitPattern>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5010,"byte_end":5052,"line_start":159,"line_end":159,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5053,"byte_end":5056,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5057,"byte_end":5135,"line_start":161,"line_end":161,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5136,"byte_end":5209,"line_start":162,"line_end":162,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5210,"byte_end":5219,"line_start":163,"line_end":163,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5467,"byte_end":5477,"line_start":174,"line_end":174,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: AnyBitPattern>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5337,"byte_end":5371,"line_start":168,"line_end":168,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5372,"byte_end":5375,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5376,"byte_end":5389,"line_start":170,"line_end":170,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5390,"byte_end":5393,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5394,"byte_end":5449,"line_start":172,"line_end":172,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5450,"byte_end":5459,"line_start":173,"line_end":173,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5696,"byte_end":5710,"line_start":184,"line_end":184,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: NoUninit + AnyBitPattern>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5554,"byte_end":5596,"line_start":178,"line_end":178,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5597,"byte_end":5600,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5601,"byte_end":5614,"line_start":180,"line_end":180,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5615,"byte_end":5618,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5619,"byte_end":5678,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5679,"byte_end":5688,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5956,"byte_end":5978,"line_start":193,"line_end":193,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: AnyBitPattern>(&[u8])\n-> Result<T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5810,"byte_end":5857,"line_start":188,"line_end":188,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5858,"byte_end":5861,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5862,"byte_end":5876,"line_start":190,"line_end":190,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5877,"byte_end":5938,"line_start":191,"line_end":191,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5939,"byte_end":5948,"line_start":192,"line_end":192,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6245,"byte_end":6263,"line_start":204,"line_end":204,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: AnyBitPattern>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6101,"byte_end":6138,"line_start":199,"line_end":199,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6139,"byte_end":6142,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6143,"byte_end":6156,"line_start":201,"line_end":201,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6157,"byte_end":6227,"line_start":202,"line_end":202,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6228,"byte_end":6237,"line_start":203,"line_end":203,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6549,"byte_end":6563,"line_start":215,"line_end":215,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: AnyBitPattern>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6355,"byte_end":6389,"line_start":208,"line_end":208,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6390,"byte_end":6393,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6394,"byte_end":6408,"line_start":210,"line_end":210,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6409,"byte_end":6412,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6413,"byte_end":6462,"line_start":212,"line_end":212,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6463,"byte_end":6531,"line_start":213,"line_end":213,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6532,"byte_end":6541,"line_start":214,"line_end":214,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6868,"byte_end":6886,"line_start":226,"line_end":226,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: NoUninit + AnyBitPattern>(&mut [u8])\n-> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6666,"byte_end":6708,"line_start":219,"line_end":219,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6709,"byte_end":6712,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6713,"byte_end":6727,"line_start":221,"line_end":221,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6728,"byte_end":6731,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6732,"byte_end":6781,"line_start":223,"line_end":223,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6782,"byte_end":6850,"line_start":224,"line_end":224,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6851,"byte_end":6860,"line_start":225,"line_end":225,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7156,"byte_end":7160,"line_start":238,"line_end":238,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: NoUninit, B: AnyBitPattern>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7017,"byte_end":7038,"line_start":232,"line_end":232,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7039,"byte_end":7042,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7043,"byte_end":7056,"line_start":234,"line_end":234,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7057,"byte_end":7060,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7061,"byte_end":7138,"line_start":236,"line_end":236,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7139,"byte_end":7148,"line_start":237,"line_end":237,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7365,"byte_end":7373,"line_start":248,"line_end":248,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nAnyBitPattern>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7239,"byte_end":7271,"line_start":242,"line_end":242,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7272,"byte_end":7275,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7276,"byte_end":7289,"line_start":244,"line_end":244,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7290,"byte_end":7293,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7294,"byte_end":7347,"line_start":246,"line_end":246,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7348,"byte_end":7357,"line_start":247,"line_end":247,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7616,"byte_end":7624,"line_start":260,"line_end":260,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: NoUninit, B: AnyBitPattern>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7498,"byte_end":7522,"line_start":254,"line_end":254,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7523,"byte_end":7526,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7527,"byte_end":7540,"line_start":256,"line_end":256,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7541,"byte_end":7544,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7545,"byte_end":7598,"line_start":258,"line_end":258,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7599,"byte_end":7608,"line_start":259,"line_end":259,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7833,"byte_end":7843,"line_start":270,"line_end":270,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: NoUninit, B: AnyBitPattern>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7709,"byte_end":7737,"line_start":264,"line_end":264,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7738,"byte_end":7741,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7742,"byte_end":7755,"line_start":266,"line_end":266,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7756,"byte_end":7759,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7760,"byte_end":7815,"line_start":268,"line_end":268,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7816,"byte_end":7825,"line_start":269,"line_end":269,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8070,"byte_end":8084,"line_start":280,"line_end":280,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nAnyBitPattern>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7934,"byte_end":7970,"line_start":274,"line_end":274,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7971,"byte_end":7974,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7975,"byte_end":7988,"line_start":276,"line_end":276,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7989,"byte_end":7992,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7993,"byte_end":8052,"line_start":278,"line_end":278,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8053,"byte_end":8062,"line_start":279,"line_end":279,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8301,"byte_end":8313,"line_start":291,"line_end":291,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: NoUninit, U: AnyBitPattern>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8226,"byte_end":8283,"line_start":289,"line_end":289,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8284,"byte_end":8293,"line_start":290,"line_end":290,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8502,"byte_end":8518,"line_start":299,"line_end":299,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: NoUninit + AnyBitPattern, U: NoUninit +\nAnyBitPattern>(&mut [T]) -> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8423,"byte_end":8484,"line_start":297,"line_end":297,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8485,"byte_end":8494,"line_start":298,"line_end":298,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9069,"byte_end":9077,"line_start":319,"line_end":319,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: NoUninit, B: AnyBitPattern>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8682,"byte_end":8711,"line_start":308,"line_end":308,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8712,"byte_end":8715,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8716,"byte_end":8793,"line_start":310,"line_end":310,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8794,"byte_end":8873,"line_start":311,"line_end":311,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8874,"byte_end":8952,"line_start":312,"line_end":312,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8953,"byte_end":8972,"line_start":313,"line_end":313,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8973,"byte_end":8976,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8977,"byte_end":8991,"line_start":315,"line_end":315,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8992,"byte_end":8995,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8996,"byte_end":9051,"line_start":317,"line_end":317,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9052,"byte_end":9061,"line_start":318,"line_end":318,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9380,"byte_end":9392,"line_start":332,"line_end":332,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: NoUninit, B: AnyBitPattern>(&A)\n-> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9187,"byte_end":9223,"line_start":325,"line_end":325,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9224,"byte_end":9227,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9228,"byte_end":9242,"line_start":327,"line_end":327,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9243,"byte_end":9246,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9247,"byte_end":9299,"line_start":329,"line_end":329,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9300,"byte_end":9362,"line_start":330,"line_end":330,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9363,"byte_end":9372,"line_start":331,"line_end":331,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9610,"byte_end":9622,"line_start":342,"line_end":342,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nAnyBitPattern>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9508,"byte_end":9552,"line_start":338,"line_end":338,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9553,"byte_end":9556,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9557,"byte_end":9592,"line_start":340,"line_end":340,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9593,"byte_end":9602,"line_start":341,"line_end":341,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10538,"byte_end":10552,"line_start":367,"line_end":367,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: NoUninit, B: AnyBitPattern>(&[A])\n-> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9780,"byte_end":9853,"line_start":351,"line_end":351,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9854,"byte_end":9857,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9858,"byte_end":9917,"line_start":353,"line_end":353,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9918,"byte_end":9987,"line_start":354,"line_end":354,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9988,"byte_end":9991,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9992,"byte_end":10006,"line_start":356,"line_end":356,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10007,"byte_end":10010,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10011,"byte_end":10091,"line_start":358,"line_end":358,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10092,"byte_end":10112,"line_start":359,"line_end":359,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10113,"byte_end":10190,"line_start":360,"line_end":360,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10191,"byte_end":10267,"line_start":361,"line_end":361,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10268,"byte_end":10348,"line_start":362,"line_end":362,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10349,"byte_end":10373,"line_start":363,"line_end":363,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10374,"byte_end":10499,"line_start":364,"line_end":364,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10500,"byte_end":10520,"line_start":365,"line_end":365,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10521,"byte_end":10530,"line_start":366,"line_end":366,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10820,"byte_end":10838,"line_start":378,"line_end":378,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nAnyBitPattern>(&mut [A]) -> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10674,"byte_end":10746,"line_start":373,"line_end":373,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10747,"byte_end":10759,"line_start":374,"line_end":374,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10760,"byte_end":10763,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10764,"byte_end":10802,"line_start":376,"line_end":376,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10803,"byte_end":10812,"line_start":377,"line_end":377,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":14097,"byte_end":14098,"line_start":50,"line_end":50,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":19463,"byte_end":19464,"line_start":132,"line_end":132,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20534,"byte_end":20550,"line_start":175,"line_end":175,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20776,"byte_end":20792,"line_start":183,"line_end":183,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42699,"byte_end":42707,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42831,"byte_end":42842,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42874,"byte_end":42887,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42929,"byte_end":42941,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56591,"byte_end":56598,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56666,"byte_end":56672,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56740,"byte_end":56747,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56815,"byte_end":56822,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56890,"byte_end":56896,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56964,"byte_end":56971,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57654,"byte_end":57660,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57959,"byte_end":57968,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58005,"byte_end":58015,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58052,"byte_end":58062,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58099,"byte_end":58109,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58146,"byte_end":58157,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58194,"byte_end":58206,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58243,"byte_end":58252,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58289,"byte_end":58299,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58336,"byte_end":58346,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58383,"byte_end":58393,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58430,"byte_end":58441,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58478,"byte_end":58490,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58531,"byte_end":58538,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60954,"byte_end":60962,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":61262,"byte_end":61273,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":61300,"byte_end":61313,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":61345,"byte_end":61357,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73464,"byte_end":73471,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73534,"byte_end":73540,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73603,"byte_end":73610,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73673,"byte_end":73680,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73743,"byte_end":73749,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73812,"byte_end":73819,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74452,"byte_end":74458,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74871,"byte_end":74880,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74912,"byte_end":74922,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74954,"byte_end":74964,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74996,"byte_end":75006,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75038,"byte_end":75049,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75081,"byte_end":75093,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75125,"byte_end":75134,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75166,"byte_end":75176,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75208,"byte_end":75218,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75250,"byte_end":75260,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75292,"byte_end":75303,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75335,"byte_end":75347,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78748,"byte_end":78749,"line_start":69,"line_end":69,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78847,"byte_end":78856,"line_start":75,"line_end":75,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78885,"byte_end":78894,"line_start":76,"line_end":76,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78923,"byte_end":78933,"line_start":77,"line_end":77,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78962,"byte_end":78972,"line_start":78,"line_end":78,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79001,"byte_end":79011,"line_start":79,"line_end":79,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79040,"byte_end":79050,"line_start":80,"line_end":80,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79079,"byte_end":79089,"line_start":81,"line_end":81,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79118,"byte_end":79128,"line_start":82,"line_end":82,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79157,"byte_end":79168,"line_start":83,"line_end":83,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79197,"byte_end":79208,"line_start":84,"line_end":84,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79237,"byte_end":79249,"line_start":85,"line_end":85,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79278,"byte_end":79290,"line_start":86,"line_end":86,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":101250,"byte_end":101258,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4524,"byte_end":4536,"line_start":142,"line_end":142,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2858,"byte_end":2865,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":29}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":14021,"byte_end":14029,"line_start":48,"line_end":48,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":165},"to":{"krate":0,"index":25}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":14032,"byte_end":14037,"line_start":48,"line_end":48,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":25}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":14040,"byte_end":14044,"line_start":48,"line_end":48,"column_start":52,"column_end":56},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":25}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":14097,"byte_end":14098,"line_start":50,"line_end":50,"column_start":39,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":27},"to":{"krate":0,"index":25}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":18984,"byte_end":18988,"line_start":121,"line_end":121,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":44}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":19463,"byte_end":19464,"line_start":132,"line_end":132,"column_start":53,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":48},"to":{"krate":0,"index":44}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20534,"byte_end":20550,"line_start":175,"line_end":175,"column_start":29,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":459},"to":{"krate":1,"index":9609}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":20776,"byte_end":20792,"line_start":183,"line_end":183,"column_start":36,"column_end":52},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":459},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":41774,"byte_end":41779,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42699,"byte_end":42707,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":27044},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42831,"byte_end":42842,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":3042},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42874,"byte_end":42887,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":37477},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":42929,"byte_end":42941,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":31291},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56591,"byte_end":56598,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":51774},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56666,"byte_end":56672,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":51783},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56740,"byte_end":56747,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":51794},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56815,"byte_end":56822,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":51803},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56890,"byte_end":56896,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":51814},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":56964,"byte_end":56971,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":51829},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57654,"byte_end":57660,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":45971},"to":{"krate":0,"index":165}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57916,"byte_end":57921,"line_start":13,"line_end":13,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":57959,"byte_end":57968,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":23765},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58005,"byte_end":58015,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":23797},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58052,"byte_end":58062,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":23829},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58099,"byte_end":58109,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":23861},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58146,"byte_end":58157,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":23893},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58194,"byte_end":58206,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":23925},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58243,"byte_end":58252,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":23573},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58289,"byte_end":58299,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":23605},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58336,"byte_end":58346,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":23637},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58383,"byte_end":58393,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":23669},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58430,"byte_end":58441,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":23701},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58478,"byte_end":58490,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":23733},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":58531,"byte_end":58538,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":2205},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60488,"byte_end":60496,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":165},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60499,"byte_end":60503,"line_start":37,"line_end":37,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":60954,"byte_end":60962,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":27044},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":61262,"byte_end":61273,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":3042},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":61300,"byte_end":61313,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":37477},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":61345,"byte_end":61357,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":31291},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73464,"byte_end":73471,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":51774},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73534,"byte_end":73540,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":51783},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73603,"byte_end":73610,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":51794},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73673,"byte_end":73680,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":51803},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73743,"byte_end":73749,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":51814},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":73812,"byte_end":73819,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":51829},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74452,"byte_end":74458,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":45971},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74805,"byte_end":74821,"line_start":14,"line_end":14,"column_start":31,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":250},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74824,"byte_end":74828,"line_start":14,"line_end":14,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74871,"byte_end":74880,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":23765},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74912,"byte_end":74922,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":23797},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74954,"byte_end":74964,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":23829},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":74996,"byte_end":75006,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":23861},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75038,"byte_end":75049,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":23893},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75081,"byte_end":75093,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":23925},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75125,"byte_end":75134,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":23573},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75166,"byte_end":75176,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":23605},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75208,"byte_end":75218,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":23637},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75250,"byte_end":75260,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":23669},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75292,"byte_end":75303,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":23701},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":75335,"byte_end":75347,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"kind":{"Impl":{"id":82}},"from":{"krate":1,"index":23733},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78688,"byte_end":78693,"line_start":67,"line_end":67,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78696,"byte_end":78700,"line_start":67,"line_end":67,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78748,"byte_end":78749,"line_start":69,"line_end":69,"column_start":34,"column_end":35},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":359},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78847,"byte_end":78856,"line_start":75,"line_end":75,"column_start":26,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":1,"index":23573},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78885,"byte_end":78894,"line_start":76,"line_end":76,"column_start":26,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":1,"index":23765},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78923,"byte_end":78933,"line_start":77,"line_end":77,"column_start":26,"column_end":36},"kind":{"Impl":{"id":88}},"from":{"krate":1,"index":23605},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":78962,"byte_end":78972,"line_start":78,"line_end":78,"column_start":26,"column_end":36},"kind":{"Impl":{"id":89}},"from":{"krate":1,"index":23797},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79001,"byte_end":79011,"line_start":79,"line_end":79,"column_start":26,"column_end":36},"kind":{"Impl":{"id":90}},"from":{"krate":1,"index":23637},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79040,"byte_end":79050,"line_start":80,"line_end":80,"column_start":26,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":1,"index":23829},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79079,"byte_end":79089,"line_start":81,"line_end":81,"column_start":26,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":1,"index":23669},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79118,"byte_end":79128,"line_start":82,"line_end":82,"column_start":26,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":23861},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79157,"byte_end":79168,"line_start":83,"line_end":83,"column_start":26,"column_end":37},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":23701},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79197,"byte_end":79208,"line_start":84,"line_end":84,"column_start":26,"column_end":37},"kind":{"Impl":{"id":95}},"from":{"krate":1,"index":23893},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79237,"byte_end":79249,"line_start":85,"line_end":85,"column_start":26,"column_end":38},"kind":{"Impl":{"id":96}},"from":{"krate":1,"index":23733},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":79278,"byte_end":79290,"line_start":86,"line_end":86,"column_start":26,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":23925},"to":{"krate":0,"index":357}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":82374,"byte_end":82378,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":377}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":101250,"byte_end":101258,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":117}},"from":{"krate":1,"index":27044},"to":{"krate":0,"index":390}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4524,"byte_end":4536,"line_start":142,"line_end":142,"column_start":29,"column_end":41},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":808},"to":{"krate":1,"index":9609}}]}